// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

import 'package:flutter_surrealdb/utils.dart';

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => -2036826091;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'flutter_surrealdb',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiSimpleSurrealProxyAuthenticate(
      {required SurrealProxy that, required String token});

  Future<dynamic> crateApiSimpleSurrealProxyCreate(
      {required SurrealProxy that, required String res});

  Future<void> crateApiSimpleSurrealProxyDelete(
      {required SurrealProxy that, required String resource});

  Future<void> crateApiSimpleSurrealProxyExport(
      {required SurrealProxy that, required String path});

  Future<void> crateApiSimpleSurrealProxyImport(
      {required SurrealProxy that, required String path});

  Future<dynamic> crateApiSimpleSurrealProxyInsert(
      {required SurrealProxy that, required String res, required dynamic data});

  Future<void> crateApiSimpleSurrealProxyInvalidate(
      {required SurrealProxy that});

  Future<SurrealProxy> crateApiSimpleSurrealProxyNewMem();

  Future<SurrealProxy> crateApiSimpleSurrealProxyNewRocksdb(
      {required String path});

  Future<List<dynamic>> crateApiSimpleSurrealProxyQuery(
      {required SurrealProxy that,
      required String query,
      required Map<String, dynamic> vars});

  Future<dynamic> crateApiSimpleSurrealProxyRun(
      {required SurrealProxy that,
      required String function,
      required dynamic args});

  Future<dynamic> crateApiSimpleSurrealProxySelect(
      {required SurrealProxy that, required String resource});

  Future<void> crateApiSimpleSurrealProxySet(
      {required SurrealProxy that,
      required String key,
      required dynamic value});

  Future<String> crateApiSimpleSurrealProxySignin(
      {required SurrealProxy that,
      required String namespace,
      required String database,
      required String access,
      required dynamic extra});

  Future<String> crateApiSimpleSurrealProxySignup(
      {required SurrealProxy that,
      required String namespace,
      required String database,
      required String access,
      required dynamic extra});

  Future<void> crateApiSimpleSurrealProxyUnset(
      {required SurrealProxy that, required String key});

  Future<dynamic> crateApiSimpleSurrealProxyUpdateContent(
      {required SurrealProxy that,
      required String resource,
      required dynamic data});

  Future<dynamic> crateApiSimpleSurrealProxyUpdateMerge(
      {required SurrealProxy that,
      required String resource,
      required dynamic data});

  Future<dynamic> crateApiSimpleSurrealProxyUpsert(
      {required SurrealProxy that, required String res, required dynamic data});

  Future<void> crateApiSimpleSurrealProxyUseDb(
      {required SurrealProxy that, required String db});

  Future<void> crateApiSimpleSurrealProxyUseNs(
      {required SurrealProxy that, required String namespace});

  Future<String> crateApiSimpleSurrealProxyVersion(
      {required SurrealProxy that});

  Stream<DBNotification> crateApiSimpleSurrealProxyWatch(
      {required SurrealProxy that, required String resource});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SurrealProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SurrealProxy;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SurrealProxyPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiSimpleSurrealProxyAuthenticate(
      {required SurrealProxy that, required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyAuthenticateConstMeta,
      argValues: [that, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyAuthenticateConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_authenticate",
        argNames: ["that", "token"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxyCreate(
      {required SurrealProxy that, required String res}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(res, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyCreateConstMeta,
      argValues: [that, res],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyCreateConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_create",
        argNames: ["that", "res"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyDelete(
      {required SurrealProxy that, required String resource}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(resource, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyDeleteConstMeta,
      argValues: [that, resource],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_delete",
        argNames: ["that", "resource"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyExport(
      {required SurrealProxy that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyExportConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyExportConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_export",
        argNames: ["that", "path"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyImport(
      {required SurrealProxy that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyImportConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyImportConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_import",
        argNames: ["that", "path"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxyInsert(
      {required SurrealProxy that,
      required String res,
      required dynamic data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(res, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyInsertConstMeta,
      argValues: [that, res, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyInsertConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_insert",
        argNames: ["that", "res", "data"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyInvalidate(
      {required SurrealProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyInvalidateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyInvalidateConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_invalidate",
        argNames: ["that"],
      );

  @override
  Future<SurrealProxy> crateApiSimpleSurrealProxyNewMem() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyNewMemConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyNewMemConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_new_mem",
        argNames: [],
      );

  @override
  Future<SurrealProxy> crateApiSimpleSurrealProxyNewRocksdb(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyNewRocksdbConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyNewRocksdbConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_new_rocksdb",
        argNames: ["path"],
      );

  @override
  Future<List<dynamic>> crateApiSimpleSurrealProxyQuery(
      {required SurrealProxy that,
      required String query,
      required Map<String, dynamic> vars}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(query, serializer);
        sse_encode_Map_String_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue_None(
            vars, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyQueryConstMeta,
      argValues: [that, query, vars],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyQueryConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_query",
        argNames: ["that", "query", "vars"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxyRun(
      {required SurrealProxy that,
      required String function,
      required dynamic args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(function, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyRunConstMeta,
      argValues: [that, function, args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyRunConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_run",
        argNames: ["that", "function", "args"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxySelect(
      {required SurrealProxy that, required String resource}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(resource, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxySelectConstMeta,
      argValues: [that, resource],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxySelectConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_select",
        argNames: ["that", "resource"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxySet(
      {required SurrealProxy that,
      required String key,
      required dynamic value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(key, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxySetConstMeta,
      argValues: [that, key, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxySetConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_set",
        argNames: ["that", "key", "value"],
      );

  @override
  Future<String> crateApiSimpleSurrealProxySignin(
      {required SurrealProxy that,
      required String namespace,
      required String database,
      required String access,
      required dynamic extra}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(namespace, serializer);
        sse_encode_String(database, serializer);
        sse_encode_String(access, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            extra, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxySigninConstMeta,
      argValues: [that, namespace, database, access, extra],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxySigninConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_signin",
        argNames: ["that", "namespace", "database", "access", "extra"],
      );

  @override
  Future<String> crateApiSimpleSurrealProxySignup(
      {required SurrealProxy that,
      required String namespace,
      required String database,
      required String access,
      required dynamic extra}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(namespace, serializer);
        sse_encode_String(database, serializer);
        sse_encode_String(access, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            extra, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxySignupConstMeta,
      argValues: [that, namespace, database, access, extra],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxySignupConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_signup",
        argNames: ["that", "namespace", "database", "access", "extra"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyUnset(
      {required SurrealProxy that, required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyUnsetConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyUnsetConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_unset",
        argNames: ["that", "key"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxyUpdateContent(
      {required SurrealProxy that,
      required String resource,
      required dynamic data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(resource, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyUpdateContentConstMeta,
      argValues: [that, resource, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyUpdateContentConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_update_content",
        argNames: ["that", "resource", "data"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxyUpdateMerge(
      {required SurrealProxy that,
      required String resource,
      required dynamic data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(resource, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyUpdateMergeConstMeta,
      argValues: [that, resource, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyUpdateMergeConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_update_merge",
        argNames: ["that", "resource", "data"],
      );

  @override
  Future<dynamic> crateApiSimpleSurrealProxyUpsert(
      {required SurrealProxy that,
      required String res,
      required dynamic data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(res, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyUpsertConstMeta,
      argValues: [that, res, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyUpsertConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_upsert",
        argNames: ["that", "res", "data"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyUseDb(
      {required SurrealProxy that, required String db}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(db, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyUseDbConstMeta,
      argValues: [that, db],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyUseDbConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_use_db",
        argNames: ["that", "db"],
      );

  @override
  Future<void> crateApiSimpleSurrealProxyUseNs(
      {required SurrealProxy that, required String namespace}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(namespace, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyUseNsConstMeta,
      argValues: [that, namespace],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyUseNsConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_use_ns",
        argNames: ["that", "namespace"],
      );

  @override
  Future<String> crateApiSimpleSurrealProxyVersion(
      {required SurrealProxy that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyVersionConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_version",
        argNames: ["that"],
      );

  @override
  Stream<DBNotification> crateApiSimpleSurrealProxyWatch(
      {required SurrealProxy that, required String resource}) {
    final sink = RustStreamSink<DBNotification>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
            that, serializer);
        sse_encode_String(resource, serializer);
        sse_encode_StreamSink_db_notification_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleSurrealProxyWatchConstMeta,
      argValues: [that, resource, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSimpleSurrealProxyWatchConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealProxy_watch",
        argNames: ["that", "resource", "sink"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SurrealProxy => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SurrealProxy => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  SurrealProxy
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SurrealProxy
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  dynamic
      dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  Map<String, dynamic>
      dco_decode_Map_String_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue_None(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
                raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  SurrealProxy
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealProxyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<DBNotification> dco_decode_StreamSink_db_notification_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Action dco_decode_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Action.values[raw as int];
  }

  @protected
  DBNotification dco_decode_db_notification(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DBNotification(
      action: dco_decode_action(arr[0]),
      value:
          dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
              arr[1]),
      uuid: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<dynamic>
      dco_decode_list_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, dynamic)>
      dco_decode_list_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value)
        .toList();
  }

  @protected
  (
    String,
    dynamic
  ) dco_decode_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  SurrealProxy
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SurrealProxy
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  dynamic
      sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return surrencodeType(inner);
  }

  @protected
  Map<String, dynamic>
      sse_decode_Map_String_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  SurrealProxy
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealProxyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<DBNotification> sse_decode_StreamSink_db_notification_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Action sse_decode_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Action.values[inner];
  }

  @protected
  DBNotification sse_decode_db_notification(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_action = sse_decode_action(deserializer);
    var var_value =
        sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            deserializer);
    var var_uuid = sse_decode_String(deserializer);
    return DBNotification(action: var_action, value: var_value, uuid: var_uuid);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<dynamic>
      sse_decode_list_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <dynamic>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
              deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, dynamic)>
      sse_decode_list_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, dynamic)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
              deserializer));
    }
    return ans_;
  }

  @protected
  (
    String,
    dynamic
  ) sse_decode_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          SurrealProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SurrealProxyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          SurrealProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SurrealProxyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(surrdecodeType(self), serializer);
  }

  @protected
  void
      sse_encode_Map_String_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue_None(
          Map<String, dynamic> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealProxy(
          SurrealProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SurrealProxyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_db_notification_Sse(
      RustStreamSink<DBNotification> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_db_notification,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_action(Action self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_db_notification(
      DBNotification self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_action(self.action, serializer);
    sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
        self.value, serializer);
    sse_encode_String(self.uuid, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          List<dynamic> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_list_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          List<(String, dynamic)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_record_string_custom_serializer_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          (String, dynamic) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
        self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class SurrealProxyImpl extends RustOpaque implements SurrealProxy {
  // Not to be used by end users
  SurrealProxyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SurrealProxyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SurrealProxy,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SurrealProxy,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SurrealProxyPtr,
  );

  Future<void> authenticate({required String token}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyAuthenticate(that: this, token: token);

  Future<dynamic> create({required String res}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyCreate(that: this, res: res);

  Future<void> delete({required String resource}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyDelete(that: this, resource: resource);

  Future<void> export_({required String path}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyExport(that: this, path: path);

  Future<void> import_({required String path}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyImport(that: this, path: path);

  Future<dynamic> insert({required String res, required dynamic data}) =>
      RustLib.instance.api
          .crateApiSimpleSurrealProxyInsert(that: this, res: res, data: data);

  Future<void> invalidate() =>
      RustLib.instance.api.crateApiSimpleSurrealProxyInvalidate(
        that: this,
      );

  Future<List<dynamic>> query(
          {required String query, required Map<String, dynamic> vars}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxyQuery(
          that: this, query: query, vars: vars);

  Future<dynamic> run({required String function, required dynamic args}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxyRun(
          that: this, function: function, args: args);

  Future<dynamic> select({required String resource}) => RustLib.instance.api
      .crateApiSimpleSurrealProxySelect(that: this, resource: resource);

  Future<void> set_({required String key, required dynamic value}) =>
      RustLib.instance.api
          .crateApiSimpleSurrealProxySet(that: this, key: key, value: value);

  Future<String> signin(
          {required String namespace,
          required String database,
          required String access,
          required dynamic extra}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxySignin(
          that: this,
          namespace: namespace,
          database: database,
          access: access,
          extra: extra);

  Future<String> signup(
          {required String namespace,
          required String database,
          required String access,
          required dynamic extra}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxySignup(
          that: this,
          namespace: namespace,
          database: database,
          access: access,
          extra: extra);

  Future<void> unset({required String key}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyUnset(that: this, key: key);

  Future<dynamic> updateContent(
          {required String resource, required dynamic data}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxyUpdateContent(
          that: this, resource: resource, data: data);

  Future<dynamic> updateMerge(
          {required String resource, required dynamic data}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxyUpdateMerge(
          that: this, resource: resource, data: data);

  Future<dynamic> upsert({required String res, required dynamic data}) =>
      RustLib.instance.api
          .crateApiSimpleSurrealProxyUpsert(that: this, res: res, data: data);

  Future<void> useDb({required String db}) =>
      RustLib.instance.api.crateApiSimpleSurrealProxyUseDb(that: this, db: db);

  Future<void> useNs({required String namespace}) => RustLib.instance.api
      .crateApiSimpleSurrealProxyUseNs(that: this, namespace: namespace);

  Future<String> version() =>
      RustLib.instance.api.crateApiSimpleSurrealProxyVersion(
        that: this,
      );

  Stream<DBNotification> watch({required String resource}) =>
      RustLib.instance.api
          .crateApiSimpleSurrealProxyWatch(that: this, resource: resource);
}
