// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

import 'package:flutter_surrealdb/utils.dart';

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/engine.dart';
import 'api/options.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1929108195;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'flutter_surrealdb',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<SurrealFlutterEngine> crateApiEngineSurrealFlutterEngineConnect(
      {required String endpoint, Options? opts});

  Future<Uint8List> crateApiEngineSurrealFlutterEngineExecute(
      {required SurrealFlutterEngine that, required List<int> data});

  Future<String> crateApiEngineSurrealFlutterEngineExport(
      {required SurrealFlutterEngine that, Uint8List? config});

  Future<void> crateApiEngineSurrealFlutterEngineImport(
      {required SurrealFlutterEngine that, required String input});

  Stream<DBNotification> crateApiEngineSurrealFlutterEngineNotifications(
      {required SurrealFlutterEngine that});

  Future<String> crateApiEngineSurrealFlutterEngineVersion();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SurrealFlutterEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SurrealFlutterEngine;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SurrealFlutterEnginePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<SurrealFlutterEngine> crateApiEngineSurrealFlutterEngineConnect(
      {required String endpoint, Options? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(endpoint, serializer);
        sse_encode_opt_box_autoadd_options(opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEngineSurrealFlutterEngineConnectConstMeta,
      argValues: [endpoint, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEngineSurrealFlutterEngineConnectConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealFlutterEngine_connect",
        argNames: ["endpoint", "opts"],
      );

  @override
  Future<Uint8List> crateApiEngineSurrealFlutterEngineExecute(
      {required SurrealFlutterEngine that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEngineSurrealFlutterEngineExecuteConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEngineSurrealFlutterEngineExecuteConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealFlutterEngine_execute",
        argNames: ["that", "data"],
      );

  @override
  Future<String> crateApiEngineSurrealFlutterEngineExport(
      {required SurrealFlutterEngine that, Uint8List? config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
            that, serializer);
        sse_encode_opt_list_prim_u_8_strict(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEngineSurrealFlutterEngineExportConstMeta,
      argValues: [that, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEngineSurrealFlutterEngineExportConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealFlutterEngine_export",
        argNames: ["that", "config"],
      );

  @override
  Future<void> crateApiEngineSurrealFlutterEngineImport(
      {required SurrealFlutterEngine that, required String input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
            that, serializer);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEngineSurrealFlutterEngineImportConstMeta,
      argValues: [that, input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEngineSurrealFlutterEngineImportConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealFlutterEngine_import",
        argNames: ["that", "input"],
      );

  @override
  Stream<DBNotification> crateApiEngineSurrealFlutterEngineNotifications(
      {required SurrealFlutterEngine that}) {
    final sink = RustStreamSink<DBNotification>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
            that, serializer);
        sse_encode_StreamSink_db_notification_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEngineSurrealFlutterEngineNotificationsConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiEngineSurrealFlutterEngineNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealFlutterEngine_notifications",
        argNames: ["that", "sink"],
      );

  @override
  Future<String> crateApiEngineSurrealFlutterEngineVersion() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEngineSurrealFlutterEngineVersionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEngineSurrealFlutterEngineVersionConstMeta =>
      const TaskConstMeta(
        debugName: "SurrealFlutterEngine_version",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SurrealFlutterEngine => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SurrealFlutterEngine => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  SurrealFlutterEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealFlutterEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SurrealFlutterEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealFlutterEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SurrealFlutterEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SurrealFlutterEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<String> dco_decode_Set_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  RustStreamSink<DBNotification> dco_decode_StreamSink_db_notification_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Action dco_decode_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Action.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CapabilitiesConfig dco_decode_box_autoadd_capabilities_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_capabilities_config(raw);
  }

  @protected
  Options dco_decode_box_autoadd_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_options(raw);
  }

  @protected
  Targets dco_decode_box_autoadd_targets(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_targets(raw);
  }

  @protected
  TargetsConfig dco_decode_box_autoadd_targets_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_targets_config(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  CapabilitiesConfig dco_decode_capabilities_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CapabilitiesConfig_Bool(
          dco_decode_bool(raw[1]),
        );
      case 1:
        return CapabilitiesConfig_Capabilities(
          scripting: dco_decode_opt_box_autoadd_bool(raw[1]),
          guestAccess: dco_decode_opt_box_autoadd_bool(raw[2]),
          liveQueryNotifications: dco_decode_opt_box_autoadd_bool(raw[3]),
          functions: dco_decode_opt_box_autoadd_targets(raw[4]),
          networkTargets: dco_decode_opt_box_autoadd_targets(raw[5]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DBNotification dco_decode_db_notification(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DBNotification(
      id: dco_decode_list_prim_u_8_strict(arr[0]),
      action: dco_decode_action(arr[1]),
      record: dco_decode_list_prim_u_8_strict(arr[2]),
      result: dco_decode_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  CapabilitiesConfig? dco_decode_opt_box_autoadd_capabilities_config(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_capabilities_config(raw);
  }

  @protected
  Options? dco_decode_opt_box_autoadd_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_options(raw);
  }

  @protected
  Targets? dco_decode_opt_box_autoadd_targets(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_targets(raw);
  }

  @protected
  TargetsConfig? dco_decode_opt_box_autoadd_targets_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_targets_config(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  Options dco_decode_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Options(
      strict: dco_decode_opt_box_autoadd_bool(arr[0]),
      queryTimeout: dco_decode_opt_box_autoadd_u_8(arr[1]),
      transactionTimeout: dco_decode_opt_box_autoadd_u_8(arr[2]),
      capabilities: dco_decode_opt_box_autoadd_capabilities_config(arr[3]),
    );
  }

  @protected
  Targets dco_decode_targets(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Targets_Bool(
          dco_decode_bool(raw[1]),
        );
      case 1:
        return Targets_Array(
          dco_decode_Set_String_None(raw[1]),
        );
      case 2:
        return Targets_Config(
          allow: dco_decode_opt_box_autoadd_targets_config(raw[1]),
          deny: dco_decode_opt_box_autoadd_targets_config(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TargetsConfig dco_decode_targets_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TargetsConfig_Bool(
          dco_decode_bool(raw[1]),
        );
      case 1:
        return TargetsConfig_Array(
          dco_decode_Set_String_None(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  SurrealFlutterEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealFlutterEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SurrealFlutterEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealFlutterEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SurrealFlutterEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SurrealFlutterEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<String> sse_decode_Set_String_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  RustStreamSink<DBNotification> sse_decode_StreamSink_db_notification_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Action sse_decode_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Action.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CapabilitiesConfig sse_decode_box_autoadd_capabilities_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_capabilities_config(deserializer));
  }

  @protected
  Options sse_decode_box_autoadd_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_options(deserializer));
  }

  @protected
  Targets sse_decode_box_autoadd_targets(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_targets(deserializer));
  }

  @protected
  TargetsConfig sse_decode_box_autoadd_targets_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_targets_config(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  CapabilitiesConfig sse_decode_capabilities_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return CapabilitiesConfig_Bool(var_field0);
      case 1:
        var var_scripting = sse_decode_opt_box_autoadd_bool(deserializer);
        var var_guestAccess = sse_decode_opt_box_autoadd_bool(deserializer);
        var var_liveQueryNotifications =
            sse_decode_opt_box_autoadd_bool(deserializer);
        var var_functions = sse_decode_opt_box_autoadd_targets(deserializer);
        var var_networkTargets =
            sse_decode_opt_box_autoadd_targets(deserializer);
        return CapabilitiesConfig_Capabilities(
            scripting: var_scripting,
            guestAccess: var_guestAccess,
            liveQueryNotifications: var_liveQueryNotifications,
            functions: var_functions,
            networkTargets: var_networkTargets);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DBNotification sse_decode_db_notification(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_list_prim_u_8_strict(deserializer);
    var var_action = sse_decode_action(deserializer);
    var var_record = sse_decode_list_prim_u_8_strict(deserializer);
    var var_result = sse_decode_list_prim_u_8_strict(deserializer);
    return DBNotification(
        id: var_id, action: var_action, record: var_record, result: var_result);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CapabilitiesConfig? sse_decode_opt_box_autoadd_capabilities_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_capabilities_config(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Options? sse_decode_opt_box_autoadd_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Targets? sse_decode_opt_box_autoadd_targets(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_targets(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TargetsConfig? sse_decode_opt_box_autoadd_targets_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_targets_config(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Options sse_decode_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_strict = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_queryTimeout = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_transactionTimeout = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_capabilities =
        sse_decode_opt_box_autoadd_capabilities_config(deserializer);
    return Options(
        strict: var_strict,
        queryTimeout: var_queryTimeout,
        transactionTimeout: var_transactionTimeout,
        capabilities: var_capabilities);
  }

  @protected
  Targets sse_decode_targets(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return Targets_Bool(var_field0);
      case 1:
        var var_field0 = sse_decode_Set_String_None(deserializer);
        return Targets_Array(var_field0);
      case 2:
        var var_allow = sse_decode_opt_box_autoadd_targets_config(deserializer);
        var var_deny = sse_decode_opt_box_autoadd_targets_config(deserializer);
        return Targets_Config(allow: var_allow, deny: var_deny);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TargetsConfig sse_decode_targets_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return TargetsConfig_Bool(var_field0);
      case 1:
        var var_field0 = sse_decode_Set_String_None(deserializer);
        return TargetsConfig_Array(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          SurrealFlutterEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SurrealFlutterEngineImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          SurrealFlutterEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SurrealFlutterEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSurrealFlutterEngine(
          SurrealFlutterEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SurrealFlutterEngineImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_Set_String_None(Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_db_notification_Sse(
      RustStreamSink<DBNotification> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_db_notification,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_action(Action self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_capabilities_config(
      CapabilitiesConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_capabilities_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_options(Options self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_targets(Targets self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_targets(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_targets_config(
      TargetsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_targets_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_capabilities_config(
      CapabilitiesConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CapabilitiesConfig_Bool(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case CapabilitiesConfig_Capabilities(
          scripting: final scripting,
          guestAccess: final guestAccess,
          liveQueryNotifications: final liveQueryNotifications,
          functions: final functions,
          networkTargets: final networkTargets
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_opt_box_autoadd_bool(scripting, serializer);
        sse_encode_opt_box_autoadd_bool(guestAccess, serializer);
        sse_encode_opt_box_autoadd_bool(liveQueryNotifications, serializer);
        sse_encode_opt_box_autoadd_targets(functions, serializer);
        sse_encode_opt_box_autoadd_targets(networkTargets, serializer);
    }
  }

  @protected
  void sse_encode_db_notification(
      DBNotification self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.id, serializer);
    sse_encode_action(self.action, serializer);
    sse_encode_list_prim_u_8_strict(self.record, serializer);
    sse_encode_list_prim_u_8_strict(self.result, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_capabilities_config(
      CapabilitiesConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_capabilities_config(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_options(
      Options? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_targets(
      Targets? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_targets(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_targets_config(
      TargetsConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_targets_config(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_options(Options self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_bool(self.strict, serializer);
    sse_encode_opt_box_autoadd_u_8(self.queryTimeout, serializer);
    sse_encode_opt_box_autoadd_u_8(self.transactionTimeout, serializer);
    sse_encode_opt_box_autoadd_capabilities_config(
        self.capabilities, serializer);
  }

  @protected
  void sse_encode_targets(Targets self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Targets_Bool(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case Targets_Array(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Set_String_None(field0, serializer);
      case Targets_Config(allow: final allow, deny: final deny):
        sse_encode_i_32(2, serializer);
        sse_encode_opt_box_autoadd_targets_config(allow, serializer);
        sse_encode_opt_box_autoadd_targets_config(deny, serializer);
    }
  }

  @protected
  void sse_encode_targets_config(TargetsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TargetsConfig_Bool(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case TargetsConfig_Array(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Set_String_None(field0, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class SurrealFlutterEngineImpl extends RustOpaque
    implements SurrealFlutterEngine {
  // Not to be used by end users
  SurrealFlutterEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SurrealFlutterEngineImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_SurrealFlutterEngine,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_SurrealFlutterEngine,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SurrealFlutterEnginePtr,
  );

  Future<Uint8List> execute({required List<int> data}) => RustLib.instance.api
      .crateApiEngineSurrealFlutterEngineExecute(that: this, data: data);

  Future<String> export_({Uint8List? config}) => RustLib.instance.api
      .crateApiEngineSurrealFlutterEngineExport(that: this, config: config);

  Future<void> import_({required String input}) => RustLib.instance.api
      .crateApiEngineSurrealFlutterEngineImport(that: this, input: input);

  Stream<DBNotification> notifications() =>
      RustLib.instance.api.crateApiEngineSurrealFlutterEngineNotifications(
        that: this,
      );
}
